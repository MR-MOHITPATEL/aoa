#include <stdio.h>
#include <stdlib.h>

typedef struct Job {
    int id;
    int deadline;
    int profit;
} Job;

int compareJobs(const void* a, const void* b) {
    return ((Job*)b)->profit - ((Job*)a)->profit;
}

void jobSequencing(Job jobs[], int n) {
    qsort(jobs, n, sizeof(Job), compareJobs);

    int maxDeadline = 0;
    for (int i = 0; i < n; i++) {
        if (jobs[i].deadline > maxDeadline)
            maxDeadline = jobs[i].deadline;
    }

    int* slots = (int*)malloc(maxDeadline * sizeof(int));
    for (int i = 0; i < maxDeadline; i++) {
        slots[i] = -1;
    }

    int maxProfit = 0;
    for (int i = 0; i < n; i++) {
        for (int j = jobs[i].deadline - 1; j >= 0; j--) {
            if (slots[j] == -1) {
                slots[j] = jobs[i].id;
                maxProfit += jobs[i].profit;
                break;
            }
        }
    }

    printf("Max Profit: %d\n", maxProfit);
    printf("Job Sequence: ");
    for (int i = 0; i < maxDeadline; i++) {
        if (slots[i] != -1) {
            printf("%d ", slots[i]);
        }
    }
    printf("\n");

    free(slots);
}

int main() {
    int n = 5; // Number of jobs
    Job jobs[n];

    // Job format: id, deadline, profit
    jobs[0].id = 1;
    jobs[0].deadline = 2;
    jobs[0].profit = 100;

    jobs[1].id = 2;
    jobs[1].deadline = 1;
    jobs[1].profit = 50;

    jobs[2].id = 3;
    jobs[2].deadline = 2;
    jobs[2].profit = 60;

    jobs[3].id = 4;
    jobs[3].deadline = 1;
    jobs[3].profit = 40;

    jobs[4].id = 5;
    jobs[4].deadline = 3;
    jobs[4].profit = 200;

    jobSequencing(jobs, n);

    return 0;
}





complexity:
best:O(nlogn)
worst:same
